1.时间复杂度
         算法在计算的时候要占用多长的时间     大部分考虑的都是时间复杂度
 
2.空间复杂度
         算法运行时需要占用多少内存
         
一个算法中的语句执行次数称为语句频度，记为T(n)，如果有某个辅助函数f(n),使得n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常熟，则称f(n)为T(n)的同数量级函数，记作T(n)=O(f(n))
称O(f(n))为算法的渐进时间复杂度，简称为时间复杂度，Tn不同，时间复杂度可能相同，比如T(n)=n^2+5n+6与T(n)=3n^2+3n+2,他们的T(n)不同，但是时间复杂度相同，都为O(n^2)

常见的时间复杂度:从上往下时间复杂度不断增大，算法的执行效率越低
1.常数阶O(1)
2.对数阶O(log2n)
3.线性阶O(n)
4.线性对数阶O(nlog2n)
5.平方阶O(n2)
6.立方阶O(n3)
7.k次方阶O(n^k)
8.指数阶O(2n)

计算时间复杂度:
用常数1代替运行时间中的所有加法常数
修改后的运行次数函数中，只保留最高阶项
去除最高阶项的系数

平均时间复杂对:所有可能出现的输入实例等概率出现的情况下，该算法的运行时间
最坏情况下的时间复杂度称为最坏时间复杂度，只考虑最坏的情况

    1.算法中的常数项可以忽略不计入运行时间，因为对运行时间的影响不大，例如（3n+10  主要的时间消耗就是3n，而+10所用时间可忽略不计）
    2.算法中的低次项可以忽略，例如（3n^2+5n 因为5n只为一次函数，相比于n^2所用时间可以忽略不计）
    3.算法中的系数可以忽略，例如(5n^2+2n和6n^3+4n 主要影响因素为n的项数不同) 